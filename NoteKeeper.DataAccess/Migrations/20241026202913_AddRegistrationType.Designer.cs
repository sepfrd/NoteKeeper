// <auto-generated />

#nullable disable

using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;

namespace NoteKeeper.DataAccess.Migrations
{
    [DbContext(typeof(NoteKeeperDbContext))]
    [Migration("20241026202913_AddRegistrationType")]
    partial class AddRegistrationType
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("NoteKeeper.DataAccess.Entities.GoogleToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("VarChar");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IdToken")
                        .HasMaxLength(5000)
                        .HasColumnType("VarChar");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("VarChar");

                    b.Property<string>("Scope")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("VarChar");

                    b.Property<string>("TokenType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VarChar");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("GoogleTokens");
                });

            modelBuilder.Entity("NoteKeeper.DataAccess.Entities.Note", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("VarChar");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("VarChar");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("NoteKeeper.DataAccess.Entities.NotionToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("VarChar");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(250)
                        .HasColumnType("VarChar");

                    b.Property<string>("BotId")
                        .HasMaxLength(100)
                        .HasColumnType("VarChar");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("VarChar");

                    b.Property<string>("NotionEmail")
                        .HasMaxLength(320)
                        .HasColumnType("VarChar");

                    b.Property<string>("NotionId")
                        .HasMaxLength(100)
                        .HasColumnType("VarChar");

                    b.Property<string>("TokenType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VarChar");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uuid");

                    b.Property<string>("WorkspaceIconUrl")
                        .HasMaxLength(250)
                        .HasColumnType("VarChar");

                    b.Property<string>("WorkspaceId")
                        .HasMaxLength(100)
                        .HasColumnType("VarChar");

                    b.Property<string>("WorkspaceName")
                        .HasMaxLength(150)
                        .HasColumnType("VarChar");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("NotionTokens");
                });

            modelBuilder.Entity("NoteKeeper.DataAccess.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("VarChar");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("VarChar");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("VarChar");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(500)
                        .HasColumnType("VarChar");

                    b.Property<int>("RegistrationType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("VarChar");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2024, 10, 26, 20, 29, 13, 228, DateTimeKind.Utc).AddTicks(7540),
                            Email = "sepfrd@outlook.com",
                            PasswordHash = "$2a$12$qUVh4Gt2tH5kbtPjrfcR.efYZz48rXwUA7TZRCqaxfJW8s2d39Qp.",
                            RegistrationType = 0,
                            UpdatedAt = new DateTime(2024, 10, 26, 20, 29, 13, 228, DateTimeKind.Utc).AddTicks(7540),
                            Username = "sepehr_frd",
                            Uuid = new Guid("0f29dba4-9bfd-4495-a282-be7075902626")
                        });
                });

            modelBuilder.Entity("NoteKeeper.DataAccess.Entities.GoogleToken", b =>
                {
                    b.HasOne("NoteKeeper.DataAccess.Entities.User", "User")
                        .WithOne("GoogleToken")
                        .HasForeignKey("NoteKeeper.DataAccess.Entities.GoogleToken", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("NoteKeeper.DataAccess.Entities.Note", b =>
                {
                    b.HasOne("NoteKeeper.DataAccess.Entities.User", "User")
                        .WithMany("Notes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("NoteKeeper.DataAccess.Entities.NotionToken", b =>
                {
                    b.HasOne("NoteKeeper.DataAccess.Entities.User", "User")
                        .WithOne("NotionToken")
                        .HasForeignKey("NoteKeeper.DataAccess.Entities.NotionToken", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("NoteKeeper.DataAccess.Entities.User", b =>
                {
                    b.Navigation("GoogleToken");

                    b.Navigation("Notes");

                    b.Navigation("NotionToken");
                });
#pragma warning restore 612, 618
        }
    }
}
